// ----------------------------
// Generator & Datasource
// ----------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------------
// User & Auth Models (NextAuth)
// ----------------------------
model User {
  id        String     @id @default(uuid())
  email     String?    @unique
  name      String?
  image     String?

  // Relations
  accounts  Account[]
  sessions  Session[]
  chats     ChatSession[] @relation("UserChats")

  createdAt DateTime   @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String

  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------------
// Chat Models
// ----------------------------
model ChatSession {
  id        String    @id @default(uuid())

  // Either user OR guest
  user      User?     @relation("UserChats", fields: [userId], references: [id])
  userId    String?
  guestId   String?   // guest sessions

  messages  Message[]
  topic     String?
  createdAt DateTime  @default(now())
}

model Message {
  id            String      @id @default(uuid())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  chatSessionId String

  sender        String      // 'user' or 'ai'
  content       String
  createdAt     DateTime    @default(now())
}
